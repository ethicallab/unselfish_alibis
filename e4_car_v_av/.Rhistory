curr <- data[i,21:26][!is.na(data[i,21:26])] #for a given row, get only the non NA values
d_subset[i,3:5] <- as.numeric(curr[curr!= ""]) #and only the non-empty values
cond_names <- data[i,34][!is.na(data[i,34])]
d_subset[i,1] <- strsplit(cond_names[[1]], "_")[[1]][1]
d_subset[i,2] <- strsplit(cond_names[[1]], "_")[[1]][2]
}
#merge good data with first and last halves of the original data
data <- cbind(d_subset, data[,27:32])
data$ss <- 1:dim(data)[1]
#check that we have equal numbers for each of our various conditions
table(data$agent_cond)
table(data$forced_cond)
# number of subjects before exclusions
n_original <- dim(data)[1]
n_original
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
#comprehension exclusions
data$comp1_recode <- ifelse(data$comp1==1, "TP", ifelse(data$comp1==2, "FP", "neither"))
data$comp2_recode <- ifelse(data$comp2==1, "forced", ifelse(data$comp2==2, "unforced", "neither"))
data$agent_num <- ifelse(data$agent_cond=="TP", 1, 2)
data$forced_num <- ifelse(data$forced_cond=="forced", 1, 2)
#perform exclusions based on comprehension checks
data <- subset(data, (data$comp1_recode == data$agent_cond) &
(data$comp2_recode == data$forced_cond))
#number of subjects after exclusions
n_after_exclusions <- dim(data)[1]
n_after_exclusions
percent_excluded <- (n_original - n_after_exclusions)/n_original #34%
percent_excluded
## mean age and gender
mean(data$age,na.rm = TRUE)
table(data$gender)[2]/sum(table(data$gender))
table(data$agent_cond)
table(data$forced_cond)
## get mean age and gender:
mean(data$age,na.rm = TRUE) # removing NAs from the dataframe before computing mean
table(data$gender)[2]/sum(table(data$gender))
##================================================================================================================
##ANALYSIS##
##================================================================================================================
#create dichotomous dv
data$choice_dicot <- ifelse(data$choice==2, 1, 0)
data$choice_dicot <- as.factor(data$choice_dicot)
data$agent_cond <- as.factor(data$agent_cond)
data$forced_cond <- as.factor(data$forced_cond)
mylogit <- glm(choice_dicot ~ agent_cond*forced_cond, data = data, family = "binomial")
summary(mylogit)
forced_tab <- table(data$choice_dicot, data$forced_cond)
forced_mod <- chisq.test(forced_tab)
forced_mod
forced_tab[2,1]/(sum(forced_tab[,1]))
forced_tab[2,2]/(sum(forced_tab[,2]))
##=============================================================================================================
##PREPARE FOR PLOTTING##
##================================================================================================================
#make arrays for plotting infinity item
choice_mat <- array(0,dim=c(3,4))
colnames(choice_mat) <- c('agent_num', 'forced_num', 'choice', 'proportion')
choice_mat <- as.data.frame(choice_mat, stringsAsFactors=FALSE)
counter <- 1
for(i in 1:2) {
for(j in 1:2) {
for(k in 1:3) {
choice_mat[counter,] <- c(i, j, k, length(data$choice[data$agent_num==i & data$forced_num==j & data$choice == k])/
length(data$choice[data$agent_num==i & data$forced_num==j])*100)
counter <- counter + 1
}
}
}
agent_labels <- c("TP", "FP")
forced_labels <- c("Two", "Three")
choice_labels <- c("Save Pedestrian", "Save Passenger", "Egalitarian")
choice_tp <- subset(choice_mat, choice_mat$agent_num==1)
choice_fp <- subset(choice_mat, choice_mat$agent_num==2)
##=============================================================================================================
##PLOT##
##================================================================================================================
p1 <-ggplot(choice_tp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p1 <- p1+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("Third Person")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=16))
p1
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("First Person")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure<-ggarrange(p1, p2, nrow=1,ncol=2,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure,left = text_grob("Proportion Agreement", color="black", face ="plain",size=20, rot=90),
bottom = text_grob("Number of Response Options", color="black", face ="plain",size=20))
##================================================================================================================
##END##
##================================================================================================================
# Julian De Freitas, 2021
# Analysis script for De Freitas
# E2 - Should Automated Vehicles Favor Passengers Over Pedestrians?
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2', #plotting
'ggsignif', #plotting significance bars
'lme4', #functions for fitting linear regression modesl
'ggforce', #make ggplot even fancier
'ggpubr', #arrange plots in a grid, if needed
'ltm', #probably not using..
'simr', # power analysis for mixed models
'compute.es', # effect size package
'effsize', # another effect size package
'pwr', #package for power calculation
)
library("lmerTest")
##================================================================================================================
##IMPORT & PRE-PROCESS DATA##
##================================================================================================================
#read data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
data <- read.csv('data.csv')
dim(data)
data <- subset(data, data$att1==2 & data$att2==2)
#replace na values for comprehension checks with 3
data$comp1[is.na(data$comp1)] <- 3
data$comp2[is.na(data$comp2)] <- 3
#define new data frame that we'll extract preprocessed data into
d_subset <- array(dim=c(dim(data)[1], 5))
colnames(d_subset) <- c('agent_cond','forced_cond', 'choice', 'comp1','comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
#extract the good data from the middle part of the raw data
for(i in 1:dim(data)[1]) {
curr <- data[i,21:26][!is.na(data[i,21:26])] #for a given row, get only the non NA values
d_subset[i,3:5] <- as.numeric(curr[curr!= ""]) #and only the non-empty values
cond_names <- data[i,34][!is.na(data[i,34])]
d_subset[i,1] <- strsplit(cond_names[[1]], "_")[[1]][1]
d_subset[i,2] <- strsplit(cond_names[[1]], "_")[[1]][2]
}
#merge good data with first and last halves of the original data
data <- cbind(d_subset, data[,27:32])
data$ss <- 1:dim(data)[1]
#check that we have equal numbers for each of our various conditions
data$vehicle_cond <- data$agent_cond # I accidentally named vehicle cond as agent cond.
table(data$vehicle_cond)
table(data$forced_cond)
data$vehicle_cond[data$vehicle_cond=="human"] <- "car"
# number of subjects before exclusions
n_original <- dim(data)[1]
n_original
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
#comprehension exclusions
data$comp1_recode <- ifelse(data$comp1==1, "car", ifelse(data$comp1==2, "AV", "relative"))
data$comp2_recode <- ifelse(data$comp2==1, "forced", ifelse(data$comp2==2, "unforced", "neither"))
data$vehicle_num <- ifelse(data$vehicle_cond=="car", 1, 2)
data$forced_num <- ifelse(data$forced_cond=="forced", 1, 2)
#perform exclusions based on attention and comprehension checks
failed_vehicle_comp <- sum(data$comp1_recode != data$vehicle_cond); failed_vehicle_comp
failed_choices_comp <- sum(data$comp2_recode != data$forced_cond); failed_choices_comp
data <- subset(data, (data$comp1_recode == data$vehicle_cond) &
(data$comp2_recode == data$forced_cond))
#number of subjects after exclusions
n_after_exclusions <- dim(data)[1]
n_after_exclusions
percent_excluded <- (n_original - n_after_exclusions)/n_original #34%
percent_excluded
## mean age and gender
mean(data$age,na.rm = TRUE)
table(data$gender)[2]/sum(table(data$gender))
table(data$agent_cond)
table(data$forced_cond)
##================================================================================================================
##ANALYSIS##
##================================================================================================================
#replicate Gill?
gill_tab <- table(data$choice[data$forced_cond=="forced"], data$agent_cond[data$forced_cond=="forced"])
gill_mod <- chisq.test(gill_tab)
gill_mod
av_save_passenger <- gill_tab[2,1]/sum(gill_tab[,1])
av_save_pedestrian <- gill_tab[1,1]/sum(gill_tab[,1])
reg_save_passenger <- gill_tab[2,2]/sum(gill_tab[,2])
reg_save_pedestrian <- gill_tab[1,2]/sum(gill_tab[,2])
#create dichotomous dv
data$choice_dicot <- ifelse(data$choice==2, 1, 0)
#convert variables to factors
data$choice_dict <- as.factor(data$choice_dicot)
data$agent_cond <- as.factor(data$agent_cond)
data$forced_cond <- as.factor(data$forced_cond)
#run model
mylogit <- glm(choice_dicot ~ agent_cond*forced_cond, data = data, family = "binomial")
summary(mylogit)
forced_tab <- table(data$choice_dicot, data$forced_cond)
forced_mod <- chisq.test(forced_tab)
forced_mod
#forced, driver v. AV
forced_only <- table(data$choice_dicot[data$forced_cond=="forced"], data$agent_cond[data$forced_cond=="forced"])
forced_only_mod <- chisq.test(forced_only)
forced_only_mod
#unforced, driver v. AV
unforced_only <- table(data$choice_dicot[data$forced_cond=="unforced"], data$agent_cond[data$forced_cond=="unforced"])
unforced_only_mod <- chisq.test(unforced_only)
unforced_only_mod
##=============================================================================================================
##PREPARE FOR PLOTTING##
##================================================================================================================
#make arrays for plotting infinity item
choice_mat <- array(0,dim=c(3,4))
colnames(choice_mat) <- c('vehicle_num', 'forced_num', 'choice', 'proportion')
choice_mat <- as.data.frame(choice_mat, stringsAsFactors=FALSE)
counter <- 1
for(i in 1:2) {
for(j in 1:2) {
for(k in 1:3) {
choice_mat[counter,] <- c(i, j, k, length(data$choice[data$vehicle_num==i & data$forced_num==j & data$choice == k])/
length(data$choice[data$vehicle_num==i & data$forced_num==j])*100)
counter <- counter + 1
}
}
}
forced_labels <- c("Two", "Three")
choice_labels <- c("Save Pedestrian", "Save Passenger", "Egalitarian")
choice_car <- subset(choice_mat, choice_mat$agent_num==1)
choice_av <- subset(choice_mat, choice_mat$agent_num==2)
##=============================================================================================================
##PLOT##
##================================================================================================================
p1 <-ggplot(choice_car,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p1 <- p1+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("Car")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=16))
p1
p2 <-ggplot(choice_av,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("AV")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure<-ggarrange(p1, p2, nrow=1,ncol=2,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure,left = text_grob("Proportion Agreement", color="black", face ="plain",size=20, rot=90),
bottom = text_grob("Number of Response Options", color="black", face ="plain",size=20))
##================================================================================================================
##END##
##================================================================================================================
choice_car
# Julian De Freitas, 2021
# Analysis script for De Freitas
# E2 - Should Automated Vehicles Favor Passengers Over Pedestrians?
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2', #plotting
'ggsignif', #plotting significance bars
'lme4', #functions for fitting linear regression modesl
'ggforce', #make ggplot even fancier
'ggpubr', #arrange plots in a grid, if needed
'ltm', #probably not using..
'simr', # power analysis for mixed models
'compute.es', # effect size package
'effsize', # another effect size package
'pwr', #package for power calculation
)
library("lmerTest")
##================================================================================================================
##IMPORT & PRE-PROCESS DATA##
##================================================================================================================
#read data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
data <- read.csv('data.csv')
dim(data)
data <- subset(data, data$att1==2 & data$att2==2)
#replace na values for comprehension checks with 3
data$comp1[is.na(data$comp1)] <- 3
data$comp2[is.na(data$comp2)] <- 3
#define new data frame that we'll extract preprocessed data into
d_subset <- array(dim=c(dim(data)[1], 5))
colnames(d_subset) <- c('agent_cond','forced_cond', 'choice', 'comp1','comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
#extract the good data from the middle part of the raw data
for(i in 1:dim(data)[1]) {
curr <- data[i,21:26][!is.na(data[i,21:26])] #for a given row, get only the non NA values
d_subset[i,3:5] <- as.numeric(curr[curr!= ""]) #and only the non-empty values
cond_names <- data[i,34][!is.na(data[i,34])]
d_subset[i,1] <- strsplit(cond_names[[1]], "_")[[1]][1]
d_subset[i,2] <- strsplit(cond_names[[1]], "_")[[1]][2]
}
#merge good data with first and last halves of the original data
data <- cbind(d_subset, data[,27:32])
data$ss <- 1:dim(data)[1]
#check that we have equal numbers for each of our various conditions
data$vehicle_cond <- data$agent_cond # I accidentally named vehicle cond as agent cond.
table(data$vehicle_cond)
table(data$forced_cond)
data$vehicle_cond[data$vehicle_cond=="human"] <- "car"
# number of subjects before exclusions
n_original <- dim(data)[1]
n_original
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
#comprehension exclusions
data$comp1_recode <- ifelse(data$comp1==1, "car", ifelse(data$comp1==2, "AV", "relative"))
data$comp2_recode <- ifelse(data$comp2==1, "forced", ifelse(data$comp2==2, "unforced", "neither"))
data$vehicle_num <- ifelse(data$vehicle_cond=="car", 1, 2)
data$forced_num <- ifelse(data$forced_cond=="forced", 1, 2)
#perform exclusions based on attention and comprehension checks
failed_vehicle_comp <- sum(data$comp1_recode != data$vehicle_cond); failed_vehicle_comp
failed_choices_comp <- sum(data$comp2_recode != data$forced_cond); failed_choices_comp
data <- subset(data, (data$comp1_recode == data$vehicle_cond) &
(data$comp2_recode == data$forced_cond))
#number of subjects after exclusions
n_after_exclusions <- dim(data)[1]
n_after_exclusions
percent_excluded <- (n_original - n_after_exclusions)/n_original #34%
percent_excluded
## mean age and gender
mean(data$age,na.rm = TRUE)
table(data$gender)[2]/sum(table(data$gender))
table(data$agent_cond)
table(data$forced_cond)
##================================================================================================================
##ANALYSIS##
##================================================================================================================
#replicate Gill?
gill_tab <- table(data$choice[data$forced_cond=="forced"], data$agent_cond[data$forced_cond=="forced"])
gill_mod <- chisq.test(gill_tab)
gill_mod
av_save_passenger <- gill_tab[2,1]/sum(gill_tab[,1])
av_save_pedestrian <- gill_tab[1,1]/sum(gill_tab[,1])
reg_save_passenger <- gill_tab[2,2]/sum(gill_tab[,2])
reg_save_pedestrian <- gill_tab[1,2]/sum(gill_tab[,2])
#create dichotomous dv
data$choice_dicot <- ifelse(data$choice==2, 1, 0)
#convert variables to factors
data$choice_dict <- as.factor(data$choice_dicot)
data$agent_cond <- as.factor(data$agent_cond)
data$forced_cond <- as.factor(data$forced_cond)
#run model
mylogit <- glm(choice_dicot ~ agent_cond*forced_cond, data = data, family = "binomial")
summary(mylogit)
forced_tab <- table(data$choice_dicot, data$forced_cond)
forced_mod <- chisq.test(forced_tab)
forced_mod
#forced, driver v. AV
forced_only <- table(data$choice_dicot[data$forced_cond=="forced"], data$agent_cond[data$forced_cond=="forced"])
forced_only_mod <- chisq.test(forced_only)
forced_only_mod
#unforced, driver v. AV
unforced_only <- table(data$choice_dicot[data$forced_cond=="unforced"], data$agent_cond[data$forced_cond=="unforced"])
unforced_only_mod <- chisq.test(unforced_only)
unforced_only_mod
##=============================================================================================================
##PREPARE FOR PLOTTING##
##================================================================================================================
#make arrays for plotting infinity item
choice_mat <- array(0,dim=c(3,4))
colnames(choice_mat) <- c('vehicle_num', 'forced_num', 'choice', 'proportion')
choice_mat <- as.data.frame(choice_mat, stringsAsFactors=FALSE)
counter <- 1
for(i in 1:2) {
for(j in 1:2) {
for(k in 1:3) {
choice_mat[counter,] <- c(i, j, k, length(data$choice[data$vehicle_num==i & data$forced_num==j & data$choice == k])/
length(data$choice[data$vehicle_num==i & data$forced_num==j])*100)
counter <- counter + 1
}
}
}
forced_labels <- c("Two", "Three")
choice_labels <- c("Save Pedestrian", "Save Passenger", "Egalitarian")
choice_mat
choice_car <- subset(choice_mat, choice_mat$vehicle_num==1)
choice_av <- subset(choice_mat, choice_mat$vehicle_num==2)
choice_car
choice_av
p1 <-ggplot(choice_car,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p1 <- p1+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("Car")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=16))
p1
p2 <-ggplot(choice_av,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("AV")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure<-ggarrange(p1, p2, nrow=1,ncol=2,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure,left = text_grob("Proportion Agreement", color="black", face ="plain",size=20, rot=90),
bottom = text_grob("Number of Response Options", color="black", face ="plain",size=20))
##================================================================================================================
##END##
##================================================================================================================
p1 <-ggplot(choice_car,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p1 <- p1+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("Regular Vehicle")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=16))
p1
p2 <-ggplot(choice_av,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("AV")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=13,height=6,noRStudioGD = TRUE)
figure<-ggarrange(p1, p2, nrow=1,ncol=2,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
annotate_figure(figure,left = text_grob("Proportion Agreement", color="black", face ="plain",size=20, rot=90),
bottom = text_grob("Number of Response Options", color="black", face ="plain",size=20))
##================================================================================================================
##END##
##================================================================================================================
#forced, driver v. AV
forced_only <- table(data$choice_dicot[data$forced_cond=="forced"], data$agent_cond[data$forced_cond=="forced"])
forced_only_mod <- chisq.test(forced_only)
forced_only_mod
n_forced_only = len(data$choice_dicot[data$forced_cond=="forced"])
n_forced_only = length(data$choice_dicot[data$forced_cond=="forced"])
n_forced_only = length(data$choice_dicot[data$forced_cond=="forced"]); n_forced_only
#forced, driver v. AV
forced_only <- table(data$choice_dicot[data$forced_cond=="forced"], data$agent_cond[data$forced_cond=="forced"])
forced_only
forced_only[1,1]
forced_only[2,1]
forced_only[2,1]/sum(forced_only[,1])
forced_only[2,2]/sum(forced_only[,2]) #proportion pedestrian
