percent_excluded
## mean age and gender
mean(as.numeric(data$age),na.rm = TRUE)
table(data$gender)[1]/sum(table(data$gender))
table(data$tempt_cond)
data$tempt_cond <- as.factor(data$tempt_cond)
data$tempt_num <- as.numeric(data$tempt_cond)
data$choice <- data$choice
##================================================================================================================
##ANALYSIS##
##================================================================================================================
mylogit <- glm(choice ~ tempt_cond, data = data, family = "binomial")
summary(mylogit)
data$choice <- data$choice - 1
mylogit <- glm(choice ~ tempt_cond, data = data, family = "binomial")
summary(mylogit)
# Julian De Freitas, 2021
# Analysis script for De Freitas
# E4, Should Automated Vehicles Favor Passengers Over Pedestrians?
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2', #plotting
'ggsignif', #plotting significance bars
'lme4', #functions for fitting linear regression modesl
'ggforce', #make ggplot even fancier
'ggpubr', #arrange plots in a grid, if neededd
'ltm', #probably not using..
'simr', # power analysis for mixed models
'compute.es', # effect size package
'effsize', # another effect size package
'pwr', #package for power calculation
)
library("lmerTest")
##================================================================================================================
##IMPORT & PRE-PROCESS DATA##
##================================================================================================================
#get subjects from e1
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directoy to current directory
#read data
data <- read.csv('data.csv')
data <- subset(data, data$att1==2 & data$att2==2)
#define new data frame that we'll extract preprocessed data into
d_subset <- array(dim=c(dim(data)[1], 4))
colnames(d_subset) <- c('tempt_cond', 'choice','comp1','comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
#extract the good data from the middle part of the raw data
for(i in 1:dim(data)[1]) {
curr <- data[i,21:24][!is.na(data[i,21:24])] #for a given row, get only the non NA values
d_subset[i,2:4] <- as.numeric(curr[curr!= ""]) #and only the non-empty values
cond_names <- data[i,32][!is.na(data[i,32])]
cond_names <- cond_names[cond_names!= ""]
d_subset[i,1] <- strsplit(cond_names[[1]], "_")[[1]][2]
}
#merge good data with first and last halves of the original data
data <- cbind(data[,18:20], d_subset, data[,25:32])
#check that we have equal numbers for each of our various conditions
table(data$tempt_cond)
# number of subjects before exclusions
n_original <- dim(data)[1]
n_original
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
#comprehension exclusions
data$comp2_recode <- ifelse(data$comp2==1, "untempted", ifelse(data$comp2==2, "tempted", "neither"))
#perform exclusions based on attention and comprehension checks
data <- subset(data, (data$comp1 == '2') &
(data$comp2_recode == data$tempt_cond))
#number of subjects after exclusions
n_after_exclusions <- dim(data)[1]
n_after_exclusions
percent_excluded <- (n_original - n_after_exclusions)/n_original #34%
percent_excluded
## mean age and gender
mean(as.numeric(data$age),na.rm = TRUE)
table(data$gender)[1]/sum(table(data$gender))
table(data$tempt_cond)
data$tempt_cond <- as.factor(data$tempt_cond)
data$tempt_num <- as.numeric(data$tempt_cond)
data$choice <- data$choice - 1
##================================================================================================================
##ANALYSIS##
##================================================================================================================
mylogit <- glm(choice ~ tempt_cond, data = data, family = "binomial")
summary(mylogit)
forced_tab <- table(data$choice_dicot, data$forced_cond)
forced_mod <- chisq.test(forced_tab)
forced_mod
data$choice <- as.numeric(data$choice)
#make arrays for plotting infinity item
choice_mat <- array(0,dim=c(4,3))
colnames(choice_mat) <- c('tempt_num', 'choice', 'proportion')
choice_mat <- as.data.frame(choice_mat, stringsAsFactors=FALSE)
counter <- 1
for(i in 1:2) {
for(j in 1:2) {
choice_mat[counter,] <- c(i,j, length(data$choice[data$tempt_num==i & data$choice==j])/
length(data$choice[data$tempt_num==i])*100)
counter <- counter + 1
}
}
tempt_labels <- c('tempted', 'untempted')
choice_labels <- c("proximity", "random")
choice_mat
data$choice
data$choice <- as.numeric(data$choice)
#make arrays for plotting infinity item
choice_mat <- array(0,dim=c(4,3))
colnames(choice_mat) <- c('tempt_num', 'choice', 'proportion')
choice_mat <- as.data.frame(choice_mat, stringsAsFactors=FALSE)
counter <- 1
for(i in 1:2) {
for(j in 0:1) {
choice_mat[counter,] <- c(i,j, length(data$choice[data$tempt_num==i & data$choice==j])/
length(data$choice[data$tempt_num==i])*100)
counter <- counter + 1
}
}
tempt_labels <- c('tempted', 'untempted')
choice_labels <- c("proximity", "random")
choice_mat
p1 <-ggplot(choice_mat,aes(x=factor(tempt_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p1 <- p1+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(tempt_labels), labels=tempt_labels)+
scale_fill_manual(values = c("#1E10AD", "#4E85C9", "#68AB6D"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=16))
p1
# dev.new(width=13,height=6,noRStudioGD = TRUE)
# figure<-ggarrange(p1, p2, nrow=1,ncol=2,common.legend = TRUE, legend="top", vjust = 1.0, hjust=0.5)
# annotate_figure(figure,left = text_grob("Proportion Agreement", color="black", face ="plain",size=20, rot=90),
#                 bottom = text_grob("Response Options", color="black", face ="plain",size=20))
##================================================================================================================
##END##
##================================================================================================================
# Julian De Freitas, 2021
# Analysis script for De Freitas
# E1 - Should Automated Vehicles Favor Passengers Over Pedestrians?
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2', #plotting
'ggsignif', #plotting significance bars
'lme4', #functions for fitting linear regression modesl
'ggforce', #make ggplot even fancier
'ggpubr', #arrange plots in a grid, if neededd
'ltm', #probably not using..
'simr', # power analysis for mixed models
'compute.es', # effect size package
'effsize', # another effect size package
'pwr', #package for power calculation
)
library("lmerTest")
##================================================================================================================
##IMPORT & PRE-PROCESS DATA##
##================================================================================================================
# read data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
data <- read.csv('data.csv')
dim(data)
data <- subset(data, data$att1==2 & data$att2==2)
#replace na values for comprehension checks with 3
data$comp1[is.na(data$comp1)] <- 3
data$comp2[is.na(data$comp2)] <- 3
#define new data frame that we'll extract preprocessed data into
d_subset <- array(dim=c(dim(data)[1], 5))
colnames(d_subset) <- c('agent_cond','forced_cond', 'choice', 'comp1','comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
#extract the good data from the middle part of the raw data
for(i in 1:dim(data)[1]) {
curr <- data[i,21:26][!is.na(data[i,21:26])] #for a given row, get only the non NA values
d_subset[i,3:5] <- as.numeric(curr[curr!= ""]) #and only the non-empty values
cond_names <- data[i,34][!is.na(data[i,34])]
d_subset[i,1] <- strsplit(cond_names[[1]], "_")[[1]][1]
d_subset[i,2] <- strsplit(cond_names[[1]], "_")[[1]][2]
}
#merge good data with first and last halves of the original data
data <- cbind(d_subset, data[,27:32])
data$ss <- 1:dim(data)[1]
#check that we have equal numbers for each of our various conditions
table(data$agent_cond)
table(data$forced_cond)
# number of subjects before exclusions
n_original <- dim(data)[1]
n_original
#comprehension exclusions
data$comp1_recode <- ifelse(data$comp1==1, "TP", ifelse(data$comp1==2, "FP", "neither"))
data$comp2_recode <- ifelse(data$comp2==1, "forced", ifelse(data$comp2==2, "unforced", "neither"))
data$agent_num <- ifelse(data$agent_cond=="TP", 1, 2)
data$forced_num <- ifelse(data$forced_cond=="forced", 1, 2)
#perform exclusions based on attention and comprehension checks
data <- subset(data, (data$comp1_recode == data$agent_cond) &
(data$comp2_recode == data$forced_cond))
#number of subjects after exclusions
n_after_exclusions <- dim(data)[1]
n_after_exclusions
n_original - n_after_exclusions
# Julian De Freitas, 2021
# Analysis script for De Freitas
# E1 - Should Automated Vehicles Favor Passengers Over Pedestrians?
## clear workspace
rm(list = ls())
options(download.file.method="libcurl")
if (!require(pacman)) {install.packages("pacman")}
pacman::p_load('ggplot2', #plotting
'ggsignif', #plotting significance bars
'lme4', #functions for fitting linear regression modesl
'ggforce', #make ggplot even fancier
'ggpubr', #arrange plots in a grid, if neededd
'ltm', #probably not using..
'simr', # power analysis for mixed models
'compute.es', # effect size package
'effsize', # another effect size package
'pwr', #package for power calculation
)
library("lmerTest")
##================================================================================================================
##IMPORT & PRE-PROCESS DATA##
##================================================================================================================
# read data
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set working directory to current directory
data <- read.csv('data.csv')
dim(data)
data <- subset(data, data$att1==2 & data$att2==2)
#replace na values for comprehension checks with 3
data$comp1[is.na(data$comp1)] <- 3
data$comp2[is.na(data$comp2)] <- 3
#define new data frame that we'll extract preprocessed data into
d_subset <- array(dim=c(dim(data)[1], 5))
colnames(d_subset) <- c('agent_cond','forced_cond', 'choice', 'comp1','comp2')
d_subset <- as.data.frame(d_subset, stringsAsFactors=FALSE)
#extract the good data from the middle part of the raw data
for(i in 1:dim(data)[1]) {
curr <- data[i,21:26][!is.na(data[i,21:26])] #for a given row, get only the non NA values
d_subset[i,3:5] <- as.numeric(curr[curr!= ""]) #and only the non-empty values
cond_names <- data[i,34][!is.na(data[i,34])]
d_subset[i,1] <- strsplit(cond_names[[1]], "_")[[1]][1]
d_subset[i,2] <- strsplit(cond_names[[1]], "_")[[1]][2]
}
#merge good data with first and last halves of the original data
data <- cbind(d_subset, data[,27:32])
data$ss <- 1:dim(data)[1]
#check that we have equal numbers for each of our various conditions
table(data$agent_cond)
table(data$forced_cond)
# number of subjects before exclusions
n_original <- dim(data)[1]
n_original
##================================================================================================================
##EXCLUSIONS##
##================================================================================================================
#comprehension exclusions
data$comp1_recode <- ifelse(data$comp1==1, "TP", ifelse(data$comp1==2, "FP", "neither"))
data$comp2_recode <- ifelse(data$comp2==1, "forced", ifelse(data$comp2==2, "unforced", "neither"))
data$agent_num <- ifelse(data$agent_cond=="TP", 1, 2)
data$forced_num <- ifelse(data$forced_cond=="forced", 1, 2)
#perform exclusions based on comprehension checks
data <- subset(data, (data$comp1_recode == data$agent_cond) &
(data$comp2_recode == data$forced_cond))
#number of subjects after exclusions
n_after_exclusions <- dim(data)[1]
n_after_exclusions
percent_excluded <- (n_original - n_after_exclusions)/n_original #34%
percent_excluded
## mean age and gender
mean(data$age,na.rm = TRUE)
table(data$gender)[2]/sum(table(data$gender))
table(data$agent_cond)
table(data$forced_cond)
## get mean age and gender:
mean(data$age,na.rm = TRUE) # removing NAs from the dataframe before computing mean
table(data$gender)[2]/sum(table(data$gender))
##================================================================================================================
##ANALYSIS##
##================================================================================================================
#create dichotomous dv
data$choice_dicot <- ifelse(data$choice==2, 1, 0)
data$choice_dicot <- as.factor(data$choice_dicot)
data$agent_cond <- as.factor(data$agent_cond)
data$forced_cond <- as.factor(data$forced_cond)
mylogit <- glm(choice_dicot ~ agent_cond*forced_cond, data = data, family = "binomial")
summary(mylogit)
forced_tab <- table(data$choice_dicot, data$forced_cond)
forced_mod <- chisq.test(forced_tab)
forced_mod
forced_tab[2,1]/(sum(forced_tab[,1]))
forced_tab[2,2]/(sum(forced_tab[,2]))
##=============================================================================================================
##PREPARE FOR PLOTTING##
##================================================================================================================
#make arrays for plotting infinity item
choice_mat <- array(0,dim=c(3,4))
colnames(choice_mat) <- c('agent_num', 'forced_num', 'choice', 'proportion')
choice_mat <- as.data.frame(choice_mat, stringsAsFactors=FALSE)
counter <- 1
for(i in 1:2) {
for(j in 1:2) {
for(k in 1:3) {
choice_mat[counter,] <- c(i, j, k, length(data$choice[data$agent_num==i & data$forced_num==j & data$choice == k])/
length(data$choice[data$agent_num==i & data$forced_num==j])*100)
counter <- counter + 1
}
}
}
agent_labels <- c("TP", "FP")
forced_labels <- c("Two", "Three")
choice_labels <- c("Save Pedestrian", "Save Passenger", "Egalitarian")
choice_tp <- subset(choice_mat, choice_mat$agent_num==1)
choice_fp <- subset(choice_mat, choice_mat$agent_num==2)
##=============================================================================================================
##PLOT##
##================================================================================================================
p1 <-ggplot(choice_tp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p1 <- p1+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("Third Person")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=16))
p1
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("First Person")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=13,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("First Person")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=13,height=6,noRStudioGD = TRUE)
dev.new(width=10,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("First Person")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=9,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
dev.new(width=8,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))
p2
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))+
theme(axis.title.y = element_text(size = 25))
p2
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))+
theme(axis.title.x = element_text(size = 25))
p2
dev.new(width=8,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))+
theme(axis.title.x = element_text(size = 20))
p2
dev.new(width=8,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))+
theme(axis.title.x = element_text(size = 20))
p2
dev.new(width=8,height=6,noRStudioGD = TRUE)
p2 <-ggplot(choice_fp,aes(x=factor(forced_num),y=as.numeric(proportion),fill=factor(choice)),color=factor(choice)) +
stat_summary(position=position_dodge(),geom="bar")+
theme_bw()+coord_cartesian(ylim=c(1,100))
p2 <- p2+theme(text = element_text(size=16),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_discrete(breaks = 1:length(forced_labels), labels=forced_labels)+
ggtitle("")+
scale_fill_manual(values = c("#cccccc", "#989898", "#333333"),name= "Choice:",
labels=choice_labels, guide = guide_legend(reverse = FALSE))+
theme_classic()+
xlab("Number of Choices") + ylab ("") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=14))+
theme(axis.text.y = element_text(size=14))+
theme(plot.title = element_text(size=20, hjust=0.5))+
theme(legend.text = element_text(size=15))+
theme(legend.title = element_text(size=14))+
theme(axis.title.x = element_text(size = 20))
p2
